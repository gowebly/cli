package main

import (
	"fmt"
	"log/slog"
	"net/http"
	{{ if eq .TemplateEngine "default" }}"path/filepath"{{ end }}

	{{ if eq .TemplateEngine "templ" }}
	"{{ .ModuleName }}/templates"
	"{{ .ModuleName }}/templates/pages"
	{{ else }}
	gowebly "github.com/gowebly/helpers"
	{{ end }}
)

// indexViewHandler handles a view for the index page.
func indexViewHandler(w http.ResponseWriter, r *http.Request) {
	// Check, if the current URL is '/'.
	if r.URL.Path != "/" {
		// If not, return HTTP 404 error.
		http.NotFound(w, r)
		slog.Error("render page", "method", r.Method, "status", http.StatusNotFound, "path", r.URL.Path)
		return
	}

	{{ if eq .TemplateEngine "templ" }}
	// Define template functions.
	metaTags := pages.MetaTags(
		"gowebly, htmx example page, go with htmx",               // define meta keywords
		"Welcome to example! You're here because it worked out.", // define meta description
	)
	bodyContent := pages.BodyContent(
		"Welcome to example!",                // define h1 text
		"You're here because it worked out.", // define p text
	)

	// Define template layout.
	if err := templates.Layout(
		"Welcome to example!", // define title text
		metaTags, bodyContent,
	).Render(r.Context(), w); err != nil {
		// Send HTTP 500 error with log.
		w.WriteHeader(http.StatusInternalServerError)
		slog.Error("render template", "method", r.Method, "status", http.StatusInternalServerError, "path", r.URL.Path)
		return
	}
	{{ else }}
	// Define paths to the user templates.
	indexPage := filepath.Join("templates", "pages", "index.html")

	// Parse user templates or return error.
	tmpl, err := gowebly.ParseTemplates(indexPage) // gowebly helper for parse user templates
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		slog.Error(err.Error(), "method", r.Method, "status", http.StatusInternalServerError, "path", r.URL.Path)
		return
	}

	// Execute (render) all templates or return error.
	if err := tmpl.Execute(w, nil); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		slog.Error(err.Error(), "method", r.Method, "status", http.StatusInternalServerError, "path", r.URL.Path)
		return
	}
	{{ end }}

	// Send log message.
	slog.Info("render page", "method", r.Method, "status", http.StatusOK, "path", r.URL.Path)
}

// showContentAPIHandler handles an API endpoint to show content.
func showContentAPIHandler(w http.ResponseWriter, r *http.Request) {
	// Check, if the current request method is GET.
	if r.Method != http.MethodGet {
		// If not, return HTTP 405 error.
		w.WriteHeader(http.StatusMethodNotAllowed)
		slog.Error("request API", "method", r.Method, "status", http.StatusMethodNotAllowed, "path", r.URL.Path)
		return
	}

	// Check, if the current request has a 'HX-Request' header.
	// For more information, see https://htmx.org/docs/#request-headers
	if r.Header.Get("HX-Request") == "" || r.Header.Get("HX-Request") != "true" {
		// If not, return HTTP 400 error.
		w.WriteHeader(http.StatusBadRequest)
		slog.Error("request API", "method", r.Method, "status", http.StatusBadRequest, "path", r.URL.Path)
		return
	}

	// Send HTML content.
	fmt.Fprintf(w, "<p>ðŸŽ‰ Hello from <strong>htmx</strong>!<br>(<code>GET /api/show</code>)</p>")

	// Send log message.
	slog.Info("request API", "method", r.Method, "status", http.StatusOK, "path", r.URL.Path)
}
